definitions:
  models.Object:
    properties:
      objectId:
        type: string
      playerName:
        type: string
      score:
        type: integer
    type: object
  models.Profile:
    properties:
      address:
        type: string
      age:
        type: integer
      email:
        type: string
      gender:
        type: string
    type: object
  models.User:
    properties:
      id:
        type: string
      password:
        type: string
      profile:
        $ref: '#/definitions/models.Profile'
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /:
    get:
      description: get all Users
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
    post:
      description: create users
      parameters:
      - description: body for user content
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
          schema:
            type: int
        "403":
          description: uid is empty
          schema:
            type: string
  /:objectId:
    delete:
      description: delete the object
      parameters:
      - description: The objectId you want to delete
        in: path
        name: objectId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "403":
          description: objectId is empty
          schema:
            type: string
    get:
      description: find object by objectid
      parameters:
      - description: the objectid you want to get
        in: path
        name: objectId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: objectId is empty
          schema:
            type: string
    put:
      description: update the object
      parameters:
      - description: The objectid you want to update
        in: path
        name: objectId
        required: true
        type: string
      - description: The body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: objectId is empty
          schema:
            type: string
  /:uid:
    delete:
      description: delete the user
      parameters:
      - description: The uid you want to delete
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "403":
          description: uid is empty
          schema:
            type: string
    get:
      description: get user by uid
      parameters:
      - description: The key for staticblock
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: uid is empty
          schema:
            type: string
    put:
      description: update the user
      parameters:
      - description: The uid you want to update
        in: path
        name: uid
        required: true
        type: string
      - description: body for user content
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: uid is not int
          schema:
            type: string
  /login:
    get:
      description: Logs user into the system
      parameters:
      - description: The username for login
        in: query
        name: username
        required: true
        type: string
      - description: The password for login
        in: query
        name: password
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: user
  /logout:
    get:
      description: Logs out current logged in user session
      responses:
        "200":
          description: OK
          schema:
            type: string
swagger: "2.0"
