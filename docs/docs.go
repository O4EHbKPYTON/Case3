// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "get all Users",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            },
            "put": {
                "description": "update the user",
                "parameters": [
                    {
                        "description": "body for user content",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "body"
                        }
                    }
                }
            },
            "post": {
                "description": "create users",
                "parameters": [
                    {
                        "description": "body for user content",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "int"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "body"
                        }
                    }
                }
            }
        },
        "/:pid": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "get plant by pid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The key for staticblock",
                        "name": "pid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Plant"
                        }
                    },
                    "403": {
                        "description": "pid is empty",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "delete the plant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The pid you want to delete",
                        "name": "pid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "pid"
                        }
                    }
                }
            }
        },
        "/:uid": {
            "get": {
                "description": "get user by uid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The key for staticblock",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": "uid is empty",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete the user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The uid you want to delete",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "uid"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Авторизация пользователя",
                "parameters": [
                    {
                        "description": "Данные для входа (логин и пароль)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный вход, возвращает токен",
                        "schema": {
                            "$ref": "#/definitions/controllers.Respons"
                        }
                    },
                    "400": {
                        "description": "Ошибка в теле запроса",
                        "schema": {
                            "$ref": "#/definitions/controllers.Respons"
                        }
                    },
                    "401": {
                        "description": "Неверные логин или пароль",
                        "schema": {
                            "$ref": "#/definitions/controllers.Respons"
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "description": "Logs out current logged in user session",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ws": {
            "get": {
                "description": "Establish WebSocket connection",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.Respons": {
            "type": "object",
            "properties": {
                "data": {},
                "err": {
                    "type": "boolean"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Plant": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "humidityRange": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lightRequirement": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "scientificName": {
                    "type": "string"
                },
                "temperatureRange": {
                    "type": "string"
                },
                "waterFrequency": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
