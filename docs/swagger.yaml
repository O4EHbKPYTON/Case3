definitions:
  controllers.Respons:
    properties:
      data: {}
      err:
        type: boolean
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Plant:
    properties:
      description:
        type: string
      humidityRange:
        type: string
      id:
        type: integer
      lightRequirement:
        type: string
      name:
        type: string
      scientificName:
        type: string
      temperatureRange:
        type: string
      waterFrequency:
        type: integer
    type: object
  models.User:
    properties:
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /:
    get:
      description: get all Users
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
    post:
      description: create users
      parameters:
      - description: body for user content
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
          schema:
            type: int
        "403":
          description: Forbidden
          schema:
            type: body
    put:
      description: update the user
      parameters:
      - description: body for user content
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: Forbidden
          schema:
            type: body
  /:pid:
    delete:
      description: delete the plant
      parameters:
      - description: The pid you want to delete
        in: path
        name: pid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: pid
      security:
      - BearerAuth: []
    get:
      description: get plant by pid
      parameters:
      - description: The key for staticblock
        in: path
        name: pid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Plant'
        "403":
          description: pid is empty
          schema:
            type: string
      security:
      - BearerAuth: []
  /:uid:
    delete:
      description: delete the user
      parameters:
      - description: The uid you want to delete
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: uid
    get:
      description: get user by uid
      parameters:
      - description: The key for staticblock
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: uid is empty
          schema:
            type: string
  /login:
    post:
      description: Авторизация пользователя
      parameters:
      - description: Данные для входа (логин и пароль)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      responses:
        "200":
          description: Успешный вход, возвращает токен
          schema:
            $ref: '#/definitions/controllers.Respons'
        "400":
          description: Ошибка в теле запроса
          schema:
            $ref: '#/definitions/controllers.Respons'
        "401":
          description: Неверные логин или пароль
          schema:
            $ref: '#/definitions/controllers.Respons'
  /logout:
    get:
      description: Logs out current logged in user session
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
  /ws:
    get:
      description: Establish WebSocket connection
      responses:
        "200":
          description: OK
swagger: "2.0"
