swagger: "2.0"
info:
  title: beego Test API
  description: |
    beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /geocoder/cords/geo/companies:
    get:
      tags:
      - geocoder/cords
      description: |-
        Возвращает координаты (широту и долготу) и адреса для всех компаний (первые 10)
        <br>
      operationId: GeoController.Get Coordinates for All Companies
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/GeoController.GetAllCompaniesCoordinatesResponse'
        "206":
          description: '"Часть компаний не имеет координат (начат процесс геокодирования)"'
          schema:
            type: array
            items:
              $ref: '#/definitions/GeoController.GetAllCompaniesCoordinatesResponse'
        "404":
          description: '{string} string "Companies not found"'
        "500":
          description: '{string} string "Failed to get companies"'
  /geocoder/cords/geo/company/{id}:
    get:
      tags:
      - geocoder/cords
      description: |-
        Возвращает координаты (широту и долготу) и адрес компании по её ID
        <br>
      operationId: GeoController.Get Coordinates by Company ID
      parameters:
      - in: path
        name: id
        description: ID компании
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.GetCoordinatesResponse'
        "202":
          description: '"Координаты еще не получены, начат процесс геокодирования"'
          schema:
            $ref: '#/definitions/controllers.GetCoordinatesResponse'
        "400":
          description: '{string} string "Invalid company ID"'
        "404":
          description: '{string} string "Company not found"'
        "500":
          description: '{string} string "Failed to get coordinates"'
  /owner/company/:
    get:
      tags:
      - owner/company
      description: |-
        Получить все компании по ID владельца
        <br>
      operationId: CompanyController.GetOwnerCompanies
      parameters:
      - in: path
        name: owner_id
        description: ID владельца
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Company'
        "400":
          description: '{string} string "Invalid owner ID"'
        "500":
          description: '{string} string "Internal server error"'
    post:
      tags:
      - owner/company
      description: |-
        Создание компании
        <br>
      operationId: CompanyController.CreateCompany
      parameters:
      - in: body
        name: body
        description: Данные компании
        required: true
        schema:
          $ref: '#/definitions/models.PostCompanyRequest'
      responses:
        "200":
          description: '"ID созданной компании"'
          schema:
            $ref: '#/definitions/models.PostCompanyResponse'
        "400":
          description: '{string} string "Invalid input"'
  /owner/company/{id}:
    get:
      tags:
      - owner/company
      description: |-
        Получить компанию по ID
        <br>
      operationId: CompanyController.GetCompany
      parameters:
      - in: path
        name: id
        description: ID компании
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Company'
        "400":
          description: '{string} string "Invalid ID"'
        "404":
          description: '{string} string "Company not found"'
    put:
      tags:
      - owner/company
      description: |-
        Обновить данные компании
        <br>
      operationId: CompanyController.UpdateCompany
      parameters:
      - in: path
        name: id
        description: ID компании
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Данные для обновления
        required: true
        schema:
          $ref: '#/definitions/models.PostCompanyRequest'
      responses:
        "200":
          description: '"status: updated"'
          schema:
            $ref: '#/definitions/models.StatusResponse'
        "400":
          description: '{string} string "Invalid input or ID"'
        "404":
          description: '{string} string "Company not found"'
        "500":
          description: '{string} string "Update failed"'
    delete:
      tags:
      - owner/company
      description: |-
        Удалить компанию по ID
        <br>
      operationId: CompanyController.DeleteCompany
      parameters:
      - in: path
        name: id
        description: ID компании
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '"status: deleted"'
          schema:
            $ref: '#/definitions/models.StatusResponse'
        "400":
          description: '{string} string "Invalid ID"'
        "500":
          description: '{string} string "Delete failed"'
  /owner/company/{id}/generate-description:
    get:
      tags:
      - owner/company
      description: |-
        Генерация описания компании по ID компании с автоматическим сохранением
        <br>
      operationId: CompanyController.GenerateCompanyDescription
      parameters:
      - in: path
        name: id
        description: ID компании
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Company'
        "400":
          description: '{string} string "Invalid company ID"'
        "404":
          description: '{string} string "Company not found"'
        "500":
          description: '{string} string "Generation failed"'
  /owner/company/{id}/update-description:
    put:
      tags:
      - owner/company
      description: |-
        Ручное обновление описания компании по ID
        <br>
      operationId: CompanyController.UpdateCompanyDescription
      parameters:
      - in: path
        name: id
        description: ID компании
        required: true
        type: integer
        format: int64
      - in: body
        name: description
        description: Описание компании
        required: true
        schema:
          $ref: '#/definitions/models.ManualDescriptionRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Company'
        "400":
          description: '{string} string "Invalid company ID or description"'
        "404":
          description: '{string} string "Company not found"'
        "500":
          description: '{string} string "Failed to update company description"'
  /owner/user/:
    get:
      tags:
      - owner/user
      description: |-
        get all Owners
        <br>
      operationId: OwnerController.GetAll
      parameters:
      - in: header
        name: Authorization
        description: "true"
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Owner'
    put:
      tags:
      - owner/user
      description: |-
        update the owner
        <br>
      operationId: OwnerController.Update
      parameters:
      - in: body
        name: body
        description: body for Owner content
        required: true
        schema:
          $ref: '#/definitions/models.Owner'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Owner'
        "403":
          description: body is empty
    post:
      tags:
      - owner/user
      description: |-
        create Owners
        <br>
      operationId: OwnerController.CreateOwner
      parameters:
      - in: body
        name: body
        description: body1 for Owner content
        required: true
        schema:
          $ref: '#/definitions/models.PostOwnerRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.PostOwnerResponse'
        "403":
          description: body is empty
  /owner/user/{uid}:
    get:
      tags:
      - owner/user
      description: |-
        get Owner by uid
        <br>
      operationId: OwnerController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Owner'
        "403":
          description: '{string} string "uid is empty"'
    delete:
      tags:
      - owner/user
      description: |-
        delete the Owner
        <br>
      operationId: OwnerController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /owner/user/login:
    post:
      tags:
      - owner/user
      description: |-
        Авторизация пользователя
        <br>
      operationId: OwnerController.Login
      parameters:
      - in: body
        name: body
        description: Данные для входа (логин и пароль)
        required: true
        schema:
          $ref: '#/definitions/models.OwnerLoginRequest'
      responses:
        "200":
          description: '"Успешный вход, возвращает токен"'
          schema:
            $ref: '#/definitions/OwnerResponse'
        "400":
          description: '{object} OwnerResponse "Ошибка в теле запроса"'
        "401":
          description: '{object} OwnerResponse "Неверные логин или пароль"'
  /owner/user/logout:
    get:
      tags:
      - owner/user
      description: |-
        Logs out current logged in Owner session
        <br>
      operationId: OwnerController.logout
      parameters:
      - in: header
        name: Authorization
        description: "true"
        type: string
      responses:
        "200":
          description: '{string} logout success'
  /visitor/user/:
    get:
      tags:
      - visitor/user
      description: |-
        get all Users
        <br>
      operationId: UserController.GetAll
      parameters:
      - in: header
        name: Authorization
        description: "true"
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    put:
      tags:
      - visitor/user
      description: |-
        update the user
        <br>
      operationId: UserController.Update
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: body is empty
    post:
      tags:
      - visitor/user
      description: |-
        create users
        <br>
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body1 for user content
        required: true
        schema:
          $ref: '#/definitions/models.PostUserRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.PostUserResponse'
        "403":
          description: body is empty
  /visitor/user/{uid}:
    get:
      tags:
      - visitor/user
      description: |-
        get user by uid
        <br>
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: '{string} string "uid is empty"'
    delete:
      tags:
      - visitor/user
      description: |-
        delete the user
        <br>
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /visitor/user/login:
    post:
      tags:
      - visitor/user
      description: |-
        Авторизация пользователя
        <br>
      operationId: UserController.Login
      parameters:
      - in: body
        name: body
        description: Данные для входа (логин и пароль)
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      responses:
        "200":
          description: '"Успешный вход, возвращает токен"'
          schema:
            $ref: '#/definitions/UserResponse'
        "400":
          description: '{object} UserResponse "Ошибка в теле запроса"'
        "401":
          description: '{object} UserResponse "Неверные логин или пароль"'
  /visitor/user/logout:
    get:
      tags:
      - visitor/user
      description: |-
        Logs out current logged in user session
        <br>
      operationId: UserController.logout
      parameters:
      - in: header
        name: Authorization
        description: "true"
        type: string
      responses:
        "200":
          description: '{string} logout success'
definitions:
  GeoController.GetAllCompaniesCoordinatesResponse:
    title: GetAllCompaniesCoordinatesResponse
    type: object
  OwnerResponse:
    title: OwnerResponse
    type: object
  UserResponse:
    title: UserResponse
    type: object
  controllers.GetCoordinatesResponse:
    title: GetCoordinatesResponse
    type: object
    properties:
      address:
        type: string
      latitude:
        type: string
      longitude:
        type: string
  models.Company:
    title: Company
    type: object
    properties:
      Address:
        type: string
      BusinessSphere:
        type: string
      City:
        type: string
      CreatedAt:
        type: string
        format: datetime
      Description:
        type: string
      INN:
        type: string
      Id:
        type: integer
        format: int64
      Lat:
        type: number
        format: double
      Lon:
        type: number
        format: double
      Name:
        type: string
      OrganizationType:
        type: string
      Owner:
        $ref: '#/definitions/models.Owner'
      UpdatedAt:
        type: string
        format: datetime
  models.LoginRequest:
    title: LoginRequest
    type: object
    properties:
      password:
        type: string
      username:
        type: string
  models.ManualDescriptionRequest:
    title: ManualDescriptionRequest
    type: object
    properties:
      description:
        type: string
  models.Owner:
    title: Owner
    type: object
    properties:
      Email:
        type: string
      Fullname:
        type: string
      Id:
        type: integer
        format: int64
      Password:
        type: string
      Phone:
        type: string
  models.OwnerLoginRequest:
    title: OwnerLoginRequest
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  models.PostCompanyRequest:
    title: PostCompanyRequest
    type: object
    properties:
      address:
        type: string
      business_sphere:
        type: string
      city:
        type: string
      description:
        type: string
      inn:
        type: string
      name:
        type: string
      organization_type:
        type: string
      owner_id:
        type: integer
        format: int64
  models.PostCompanyResponse:
    title: PostCompanyResponse
    type: object
    properties:
      id:
        type: integer
        format: int64
  models.PostOwnerRequest:
    title: PostOwnerRequest
    type: object
    properties:
      email:
        type: string
      fullname:
        type: string
      password:
        type: string
      phone:
        type: string
  models.PostOwnerResponse:
    title: PostOwnerResponse
    type: object
    properties:
      id:
        type: integer
        format: int64
  models.PostUserRequest:
    title: PostUserRequest
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
  models.PostUserResponse:
    title: PostUserResponse
    type: object
    properties:
      id:
        type: integer
        format: int64
  models.StatusResponse:
    title: StatusResponse
    type: object
    properties:
      status:
        type: string
  models.User:
    title: User
    type: object
    properties:
      Email:
        type: string
      Id:
        type: integer
        format: int64
      Password:
        type: string
      Username:
        type: string
tags:
- name: visitor/user
  description: |
    Operations about Users
- name: owner/user
  description: |
    Operations about Owner
- name: owner/company
  description: |
    Operations about companies
- name: geocoder/cords
  description: |
    Operations about YandexMaps
    controllers/geocoder.go
    @APIVersion 1.0.0
    @Title Geo Controller
    @Description Геокодирование адресов компаний
