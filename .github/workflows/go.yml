name: Docker Compose Build and Deploy

on:
  push:
    branches: [ "main" ]

env:
  DB_USER: user
  DB_PASSWORD: 12345
  DB_NAME: mydatabase
  DB_PORT: 5432
  SERVER_IP: 158.160.47.233
  SERVER_USER: agamolodets

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/go-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install ssh key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} << EOF
            # Pull latest images
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/go-app:latest
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-frontend:latest
            
            # Create or update docker-compose.yml
            cat > docker-compose.yml << 'EOL'
          version: '3.8'

          services:
            app:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/go-app:latest
              container_name: go_app
              depends_on:
                db:
                  condition: service_healthy
              environment:
                - DB_HOST=db
                - DB_PORT=${{ env.DB_PORT }}
                - DB_USER=${{ env.DB_USER }}
                - DB_PASSWORD=${{ env.DB_PASSWORD }}
                - DB_NAME=${{ env.DB_NAME }}
              ports:
                - "8080:8080"
              restart: always

            db:
              image: postgres:13
              container_name: postgres_db
              restart: always
              environment:
                - POSTGRES_USER=${{ env.DB_USER }}
                - POSTGRES_DB=${{ env.DB_NAME }}
                - POSTGRES_PASSWORD=${{ env.DB_PASSWORD }}
              ports:
                - "5428:5432"
              volumes:
                - pgdata:/var/lib/postgresql/data
                - ./dump.sql:/docker-entrypoint-initdb.d/dump.sql
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U ${{ env.DB_USER }} -d ${{ env.DB_NAME }}"]
                interval: 10s
                timeout: 5s
                retries: 5

            frontend:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-frontend:latest
              container_name: nginx_frontend
              ports:
                - "80:80"
              restart: always

          volumes:
            pgdata:
          EOL

            # Stop and remove old containers
            docker-compose down || true
            
            # Start new containers
            docker-compose up -d
          EOF
